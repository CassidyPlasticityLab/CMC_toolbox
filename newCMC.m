% data_process.m reads in .mff files collected via EGI netstation and
% applies several user-specified preprocessing steps including filtering,
% rereferencing, and channel selection




% It preprocesses the data, isolates the data signals, and concatenates the
% EEG and EMG

% TO RUN, follow the prompt and load the .set file corresponding to the file of interest
%         eeafter prompted next load the raw .mff file corresponding to the
%         file of interest. The raw .mff file must be in the current
%         directory


%OUTPUT:
% fd: A struct containing all relevant coherence info created by matlab
% data: A struct containing all relevant information. Can be utilized with
% fieldtrip functions

% Load the preprocessed EEG into Matlab

EEG = pop_loadset;

%numTrials = input('How many trials were supposed to be performed \n');
numTrials = [67, 73, 82, 91, 92, 102, 103, 111, 112, 120, 121, 133, 134, 145, 146, 156, 165, 166, 174, 175, 187, 188, 199, 200, 208, 209, 216, 217, 218, 219, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257]

%hilb = input('Would you like to apply a Hilbert Transform to the EMG (y/n) \n', 's');
hilb = 'y'
%rectify = input('Would you like to rectify the EMG (y/n) \n', 's' );
rectify = 'y'

%lesionSide = input('What hemisphere did the lesion occur in (l/r) \n', 's' );
lesionSide = 'r'

%affectedExtremity = input('What extremity is more affected (l/r) \n', 's' );
affectedExtremity = 'l'

%strokeType = input('Was the stroke cortical or cerebellar (cort/cereb) \n', 's' );
strokeType = 'cort'

%trialStart = input('What time would you like to start your CMC trial with respect to stimulus onset in ms? \n');
trialStart = 1000

%trialEnd = input('What time would you like to end your CMC trial with respect to stimulus onset in ms? \n');
trialEnd  =4000

%saveTopos = input('Would you like to save the topographs (y/n) \n', 's');
saveTopos = 'y'

%Artwork



disp(' ');

disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????????????????????????    ????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????    ??????????????????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????????????        ????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????  ????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????    ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????  ????????????????????????????????  ????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????  ??????????????????  ????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????  ??????????????      ??????????????????    ??????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????  ????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????      ??  ????  ??????????????????????????????????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????  ??????????????????????????????????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????  ??????????  ????  ????????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????  ??  ??????  ????  ????????????  ??????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????        ??  ??????????????    ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????  ????????      ????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????  ??  ????      ????????????????????????????  ??????????????????????????????????????????????????????????????????  ??????????????????????????????????????????????????????????????');
disp('????????????????????????  ??    ????  ????????????????    ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????    ????  ??????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????  ??  ??????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????  ??????????  ????????????????      ??????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????    ??  ??????  ??????????????  ????????????  ??????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????  ??????????    ??????????????  ????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????  ????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????    ????    ????????????????????  ??????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????        ??  ??????????????????  ????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????  ??????    ??????????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????  ??????    ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????  ??????????????????  ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????  ??????????????????    ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('??????????????????????????????????  ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp('????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????');
disp(' ');
disp(' ');
disp(' ');
disp(' ');
disp(' ');
disp(' ');
disp(' ');
disp(' ');

disp(' _______     _      _______  _______  _______  ___  _    _');
disp('|           / \    |        |            |    |   \  \  /');
disp('|          /   \   |______  |_______     |    |    \  \/');
disp('|         /-----\         |         |    |    |    /   |');
disp('|_______ /       \ _______|  _______| ___|___ |_ _/    | ');

disp (' ');

disp('|            _      ______');
disp('|           / \    |      |');
disp('|          /   \   |_____/');
disp('|         /-----\  |     \');
disp('|_______ /       \ |______|'); 

%Define Frequency Bands
delta = 1:3;
% confirmFreq = input(strcat('Please confirm that delta represents frequencies: \n', num2str(delta), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     delta = input('Please enter the frequency range for delta []');
% end

theta = 4:7;
% confirmFreq = input(strcat('Please confirm that theta represents frequencies: \n', num2str(theta), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     theta = input('Please enter the frequency range for theta []');
% end

alphaMu = 8:12;
% confirmFreq = input(strcat('Please confirm that alphaMu represents frequencies: \n', num2str(alphaMu), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     alphaMu = input('Please enter the frequency range for alphaMu []');
% end

beta1 = 13:19;
% confirmFreq = input(strcat('Please confirm that beta1 represents frequencies: \n', num2str(beta1), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     beta1 = input('Please enter the frequency range for beta1 []');
% end

beta2 = 20:30;
% confirmFreq = input(strcat('Please confirm that beta2 represents frequencies: \n', num2str(beta2), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     beta2 = input('Please enter the frequency range for beta2 []');
% end

gamma1 = 31:40;
% confirmFreq = input(strcat('Please confirm that gamma1 represents frequencies: \n', num2str(gamma1), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     gamma1 = input('Please enter the frequency range for gamma1 []');
% end

gamma2 = 41:50;
% confirmFreq = input(strcat('Please confirm that gamma2 represents frequencies: \n', num2str(gamma2), ' (y/n) \n '), 's');
% if confirmFreq == 'n'
%     gamma2 = input('Please enter the frequency range for gamma2 []');
% end


col = size(EEG.chanlocs, 2);

%Get channel types and their respective rows
for i = 1:col
    if EEG.chanlocs(i).type == 'EEG'
        EEGChans(i) = i;
        EEGOriginalLabels{i} = EEG.chanlocs(i).labels;
    elseif EEG.chanlocs(i).type == 'PNS'
        EMGChans(i) = i;
        EMGChans( :, all(~EMGChans,1) ) = [];
        EMGLocs(i) = EEG.chanlocs(i);
    else
        otherChans(i) =i;
        otherChans( :, all(~otherChans,1) ) = [];
        otherChansLocs(i) = EEG.chanlocs(i);
    end
end

EMGLocs(1:size(EEGChans, 2)) = [];

%%Add EEG Channels Back In

% %Remove fiducials and reference channel
% col = size(EEG.urchanlocs,2);
% for i = 1:col
%     if EEG.urchanlocs(i).identifier == 0
%         EEGLocs(i) = EEG.urchanlocs(i);
%     end
% end
% 
% %Add the PNS channel locations and labels
% newLocs = EEGLocs;
% col = size(EMGLocs,2);
% for i = 1:col
%     newLocs(length(EEGLocs)+i).labels = EMGLocs(i).labels;
%     newLocs(length(EEGLocs)+i).type = EMGLocs(i).type;
% end
% 
% 
% eegData = EEG.data(EEGChans, :, :);
% %Add the PNS channel Data
% restored_data = add_deleted_chans(eegData, EEG.chanlocs);
% newData = restored_data;
% newData(newData==0) = NaN;
% col = size(EMGLocs, 2);
% for i = 1:col
%     newData((size(restored_data, 1)+i), :, :) = EEG.data((length(EEGChans)+i), :, :);
% end
% 
% EEG.data = newData;
% EEG.chanlocs = newLocs;

%Apply Hilbert Transform
if hilb == 'y'
    EEG.data(EMGChans, :, :) = hilbert(EEG.data(EMGChans, :, :));
    disp('Hilbert Transform applied to EMG');
else
    EEG.data = EEG.data;
end

%Rectify EMG
if rectify =='y'
    EEG.data(EMGChans, :, :) = abs(EEG.data(EMGChans, :, :));
    disp('EMG is rectified')
else
    EEG.data = EEG.data;
end

if lesionSide == 'r' || strokeType == 'cort'
    for i = 1:size(EEG.chanlocs, 2)
        EEG.chanlocs(i).Y = EEG.chanlocs(i).Y*(-1);
        EEG.chanlocs(i).theta = EEG.chanlocs(i).theta*(-1);
        EEG.chanlocs(i).sph_theta_besa = EEG.chanlocs(i).sph_theta_besa*(-1);
    end
end

%So long as EMG Channels are the same bilaterally this will work
col = size(EMGChans, 2);
if affectedExtremity == 'l'
    half = ceil(numel(EMGChans)/2);
    newOrder = horzcat(EMGChans(half+1:end), EMGChans(1:half));
    tempData = EEG.data;
    for i = 1:col
        EEG.data(EMGChans(i), :, :) = tempData(newOrder(i),:, :);
    end
end


%Convert data for fieldtrip processing
data  = eeglab2fieldtrip(EEG, 'preprocessing');
col = size(EEG.chanlocs, 2);
for i = 1:col
    data.label{i} = EEG.chanlocs(i).labels;
end

col = size(data.trial, 2);
for i = 1:col
    data.trial{1, i} = data.trial{1, i}(:, trialStart:trialEnd);
    data.time{1, i} = data.time{1, i}(:, trialStart:trialEnd);
end


cfg            = [];
cfg.output     = 'powandcsd';
cfg.method     = 'mtmfft';
cfg.foilim     = [1:50];
cfg.tapsmofrq  = 5;
cfg.keeptrials = 'yes';
freq           = ft_freqanalysis(cfg, data);

col = size(EMGChans, 2);
for i = 1:col
    freq.elec.chantype{EMGChans(i), 1} = 'PNS';
end

if exist('otherChans', 'var')
    col = size(otherChans,2);
    for i = 1:col
        freq.elec.chantype{otherChans(i), 1} = 'Other';
    end
end

cfg            = [];
cfg.method     = 'coh';
cfg.keeptrials = 'yes';
fd             = ft_connectivityanalysis(cfg, freq);

col = size(EMGLocs, 2);
for i = 1:col
    EMGLabels{i} = EMGLocs(i).labels;
end

%GRAPHI
% col = size(EMGLabels,2);
% for i = 1:col
%     cfg                  = [];
%     cfg.parameter        = 'cohspctrm';
%     cfg.xlim             = [delta(1) delta(end-1); theta(1) theta(end-1); alphaMu(1) alphaMu(end-1); beta1(1) beta1(end-1); beta2(1) beta2(end-1); gamma1(1) gamma1(end-1); gamma2(1) gamma2(end-1)];
%     cfg.zlim             = [0.02 0.08];
%     cfg.refchannel       = {EMGLabels{1, i}};
%     cfg.comment          = 'xlim';
%     cfg.channel          = EEGOriginalLabels;
%     
%     if lesionSide == 'r' || strokeType == 'cort'
%         cfg.layout           = 'GSN-HydroCel-257-flip.sfp';
%     else
%         cfg.layout       = 'GSN-HydroCel-257.sfp';
%     end
%     figure; ft_topoplotER(cfg, fd);
%     imName = strcat(EEG.setname, '_', EMGLabels{1, i}, '.svg');
%     if saveTopos =='y'
%         saveas(gcf, imName);
%     end
% end


%Specific trial number saved
popSelectStr = "EEG = pop_select( EEG, 'notrial',[";
k = strfind(EEG.history, popSelectStr);
totalTrials = 1:numTrials;
col = size(k, 2)
for i =1:col
    l{i} = extractAfter(EEG.history, k(i)+strlength(popSelectStr)-1);
    m{i} = extractBefore(l{i}, ']');
    rejectedEpochs{i} = str2num(m{1, i});
end

retainedTrials = [1:numTrials];
col = size(rejectedEpochs, 2);
for i = 1:col
    retainedTrials(rejectedEpochs{1, i}(1, :)) = [];
end


col =size(fd.elec.label, 2);
labelsRowIndex = 1;
for i = 1:col
    for j = i+1:col
        elecCoh{i, j} = fd.cohspctrm(labelsRowIndex, :);
        labelsRowIndex = labelsRowIndex+1;
    end
end


% 
% load ROI;
% for i = 1:length(ROI)
%     cohROI{1, 1+i} = ROI{1, i};
%     cohROI{1+i, 1} = ROI{1, i};
% end
% 
% 
% for i = 1:length(ROI)
%     for j = i+1:length(ROI)
%         for k = 1:length(ROI{2, i})
%             for l = 1:length(ROI{2, j})
%                 temp = elecCoh(ROI{2, j}(l), ROI{2, i}(k));
%                
%             end
%         end
%     end
% end

